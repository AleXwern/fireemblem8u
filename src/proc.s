@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	Initialize6CEngine
	.type	 Initialize6CEngine,function
	.thumb_func
Initialize6CEngine:
	push	{r4, r5, r6, r7, lr}
	mov	r4, #0x0
	ldr	r7, .L13
	ldr	r5, .L13+0x4
	ldr	r0, .L13+0x8
	mov	ip, r0
	mov	r2, #0x0
	add	r6, r5, #0
	mov	r3, #0x0
.L6:
	add	r1, r3, r7
	str	r2, [r1]
	str	r2, [r1, #0x4]
	str	r2, [r1, #0x8]
	str	r2, [r1, #0xc]
	str	r2, [r1, #0x10]
	str	r2, [r1, #0x14]
	str	r2, [r1, #0x18]
	str	r2, [r1, #0x1c]
	str	r2, [r1, #0x20]
	strh	r2, [r1, #0x24]
	add	r0, r1, #0
	add	r0, r0, #0x26
	strb	r2, [r0]
	add	r0, r0, #0x1
	strb	r2, [r0]
	add	r0, r0, #0x1
	strb	r2, [r0]
	stmia	r6!, {r1}
	add	r3, r3, #0x6c
	add	r4, r4, #0x1
	cmp	r4, #0x3f
	ble	.L6	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	mov	r0, #0x0
	str	r0, [r1]
	mov	r0, ip
	str	r5, [r0]
	ldr	r1, .L13+0xc
	mov	r2, #0x0
	add	r0, r1, #0
	add	r0, r0, #0x1c
.L11:
	str	r2, [r0]
	sub	r0, r0, #0x4
	cmp	r0, r1
	bge	.L11	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gUnknown_02024E68
	.word	gUnknown_02026968
	.word	gUnknown_02026A6C
	.word	gUnknown_02026A70
.Lfe1:
	.size	 Initialize6CEngine,.Lfe1-Initialize6CEngine
	.align	2, 0
	.globl	New6C
	.type	 New6C,function
	.thumb_func
New6C:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	bl	Allocate6C
	add	r5, r0, #0
	str	r4, [r5]
	str	r4, [r5, #0x4]
	mov	r0, #0x0
	str	r0, [r5, #0x8]
	str	r0, [r5, #0xc]
	str	r0, [r5, #0x14]
	str	r0, [r5, #0x18]
	str	r0, [r5, #0x1c]
	str	r0, [r5, #0x20]
	mov	r1, #0x0
	strh	r0, [r5, #0x24]
	add	r0, r5, #0
	add	r0, r0, #0x26
	strb	r1, [r0]
	add	r0, r0, #0x2
	strb	r1, [r0]
	add	r1, r5, #0
	add	r1, r1, #0x27
	mov	r0, #0x8
	strb	r0, [r1]
	cmp	r6, #0x7
	bgt	.L16	@cond_branch
	add	r0, r5, #0
	add	r1, r6, #0
	bl	InsertMain6C
	b	.L17
.L16:
	add	r0, r5, #0
	add	r1, r6, #0
	bl	InsertChild6C
.L17:
	add	r0, r5, #0
	bl	Call6CCode
	add	r2, r5, #0
	add	r2, r2, #0x27
	ldrb	r1, [r2]
	mov	r0, #0xf7
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r5, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 New6C,.Lfe2-New6C
	.align	2, 0
	.globl	NewBlocking6C
	.type	 NewBlocking6C,function
	.thumb_func
NewBlocking6C:
	push	{lr}
	bl	New6C
	add	r2, r0, #0
	ldr	r0, [r2]
	cmp	r0, #0
	beq	.L19	@cond_branch
	add	r3, r2, #0
	add	r3, r3, #0x27
	ldrb	r1, [r3]
	mov	r0, #0x2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldr	r1, [r2, #0x14]
	add	r1, r1, #0x28
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	add	r0, r2, #0
	b	.L20
.L19:
	mov	r0, #0x0
.L20:
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 NewBlocking6C,.Lfe3-NewBlocking6C
	.align	2, 0
	.globl	Delete6CInternal
	.type	 Delete6CInternal,function
	.thumb_func
Delete6CInternal:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x20]
	cmp	r0, #0
	beq	.L22	@cond_branch
	bl	Delete6CInternal
.L22:
	ldr	r0, [r4, #0x18]
	cmp	r0, #0
	beq	.L23	@cond_branch
	bl	Delete6CInternal
.L23:
	add	r6, r4, #0
	add	r6, r6, #0x27
	ldrb	r0, [r6]
	mov	r5, #0x1
	and	r5, r5, r0
	cmp	r5, #0
	bne	.L21	@cond_branch
	ldr	r1, [r4, #0x8]
	cmp	r1, #0
	beq	.L25	@cond_branch
	add	r0, r4, #0
	bl	_call_via_r1
.L25:
	add	r0, r4, #0
	bl	Free6C
	str	r5, [r4]
	str	r5, [r4, #0xc]
	ldrb	r0, [r6]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r6]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L21	@cond_branch
	ldr	r1, [r4, #0x14]
	add	r1, r1, #0x28
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L21:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 Delete6CInternal,.Lfe4-Delete6CInternal
	.align	2, 0
	.globl	Delete6C
	.type	 Delete6C,function
	.thumb_func
Delete6C:
	push	{r4, lr}
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L28	@cond_branch
	bl	Isolate6C
	add	r0, r4, #0
	bl	Delete6CInternal
.L28:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 Delete6C,.Lfe5-Delete6C
	.align	2, 0
	.globl	Allocate6C
	.type	 Allocate6C,function
	.thumb_func
Allocate6C:
	ldr	r1, .L30
	ldr	r2, [r1]
	ldmia	r2!, {r0}
	str	r2, [r1]
	bx	lr
.L31:
	.align	2, 0
.L30:
	.word	gUnknown_02026A6C
.Lfe6:
	.size	 Allocate6C,.Lfe6-Allocate6C
	.align	2, 0
	.globl	Free6C
	.type	 Free6C,function
	.thumb_func
Free6C:
	ldr	r2, .L33
	ldr	r1, [r2]
	sub	r1, r1, #0x4
	str	r1, [r2]
	str	r0, [r1]
	bx	lr
.L34:
	.align	2, 0
.L33:
	.word	gUnknown_02026A6C
.Lfe7:
	.size	 Free6C,.Lfe7-Free6C
	.align	2, 0
	.globl	InsertMain6C
	.type	 InsertMain6C,function
	.thumb_func
InsertMain6C:
	push	{lr}
	add	r2, r0, #0
	add	r3, r1, #0
	lsl	r1, r3, #0x2
	.code	16
	ldr	r0, .L37
	add	r1, r1, r0
	ldr	r0, [r1]
	cmp	r0, #0
	beq	.L36	@cond_branch
	str	r2, [r0, #0x1c]
	str	r0, [r2, #0x20]
.L36:
	str	r3, [r2, #0x14]
	str	r2, [r1]
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	gUnknown_02026A70
.Lfe8:
	.size	 InsertMain6C,.Lfe8-InsertMain6C
	.align	2, 0
	.globl	InsertChild6C
	.type	 InsertChild6C,function
	.thumb_func
InsertChild6C:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, [r1, #0x18]
	cmp	r0, #0
	beq	.L40	@cond_branch
	str	r2, [r0, #0x1c]
	ldr	r0, [r1, #0x18]
	str	r0, [r2, #0x20]
.L40:
	str	r2, [r1, #0x18]
	str	r1, [r2, #0x14]
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 InsertChild6C,.Lfe9-InsertChild6C
	.align	2, 0
	.globl	Isolate6C
	.type	 Isolate6C,function
	.thumb_func
Isolate6C:
	push	{lr}
	add	r2, r0, #0
	ldr	r1, [r2, #0x1c]
	cmp	r1, #0
	beq	.L42	@cond_branch
	ldr	r0, [r2, #0x20]
	str	r0, [r1, #0x20]
.L42:
	ldr	r1, [r2, #0x20]
	cmp	r1, #0
	beq	.L43	@cond_branch
	ldr	r0, [r2, #0x1c]
	str	r0, [r1, #0x1c]
.L43:
	ldr	r1, [r2, #0x14]
	cmp	r1, #0x8
	ble	.L44	@cond_branch
	ldr	r0, [r1, #0x18]
	cmp	r0, r2
	bne	.L46	@cond_branch
	ldr	r0, [r2, #0x20]
	str	r0, [r1, #0x18]
	b	.L46
.L44:
	lsl	r0, r1, #0x2
	.code	16
	ldr	r1, .L48
	add	r1, r0, r1
	ldr	r0, [r1]
	cmp	r0, r2
	bne	.L46	@cond_branch
	ldr	r0, [r2, #0x20]
	str	r0, [r1]
.L46:
	mov	r0, #0x0
	str	r0, [r2, #0x1c]
	str	r0, [r2, #0x20]
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	gUnknown_02026A70
.Lfe10:
	.size	 Isolate6C,.Lfe10-Isolate6C
	.align	2, 0
	.globl	Exec6C_
	.type	 Exec6C_,function
	.thumb_func
Exec6C_:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x20]
	cmp	r0, #0
	beq	.L51	@cond_branch
	bl	Exec6C_
.L51:
	add	r0, r4, #0
	add	r0, r0, #0x28
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L52	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x27
	ldrb	r1, [r2]
	mov	r0, #0x8
	and	r0, r0, r1
	add	r5, r2, #0
	cmp	r0, #0
	bne	.L52	@cond_branch
	ldr	r0, [r4, #0xc]
	cmp	r0, #0
	bne	.L57	@cond_branch
	add	r0, r4, #0
	bl	Call6CCode
	ldr	r0, [r4, #0xc]
	cmp	r0, #0
	beq	.L54	@cond_branch
.L57:
	ldr	r1, [r4, #0xc]
	add	r0, r4, #0
	bl	_call_via_r1
.L54:
	ldrb	r1, [r5]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L50	@cond_branch
.L52:
	ldr	r0, [r4, #0x18]
	cmp	r0, #0
	beq	.L50	@cond_branch
	bl	Exec6C_
.L50:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 Exec6C_,.Lfe11-Exec6C_
	.align	2, 0
	.globl	Exec6C
	.type	 Exec6C,function
	.thumb_func
Exec6C:
	push	{lr}
	cmp	r0, #0
	beq	.L59	@cond_branch
	bl	Exec6C_
.L59:
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 Exec6C,.Lfe12-Exec6C
	.align	2, 0
	.globl	Break6CLoop
	.type	 Break6CLoop,function
	.thumb_func
Break6CLoop:
	mov	r1, #0x0
	str	r1, [r0, #0xc]
	bx	lr
.Lfe13:
	.size	 Break6CLoop,.Lfe13-Break6CLoop
	.align	2, 0
	.globl	Find6C
	.type	 Find6C,function
	.thumb_func
Find6C:
	push	{lr}
	add	r3, r0, #0
	ldr	r1, .L69
	mov	r2, #0x0
.L65:
	ldr	r0, [r1]
	cmp	r0, r3
	bne	.L64	@cond_branch
	add	r0, r1, #0
	b	.L68
.L70:
	.align	2, 0
.L69:
	.word	gUnknown_02024E68
.L64:
	add	r2, r2, #0x1
	add	r1, r1, #0x6c
	cmp	r2, #0x3f
	ble	.L65	@cond_branch
	mov	r0, #0x0
.L68:
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 Find6C,.Lfe14-Find6C
	.align	2, 0
	.globl	sub_8002EC4
	.type	 sub_8002EC4,function
	.thumb_func
sub_8002EC4:
	push	{lr}
	add	r3, r0, #0
	ldr	r1, .L79
	mov	r2, #0x0
.L75:
	ldr	r0, [r1]
	cmp	r0, r3
	bne	.L74	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x28
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L74	@cond_branch
	add	r0, r1, #0
	b	.L78
.L80:
	.align	2, 0
.L79:
	.word	gUnknown_02024E68
.L74:
	add	r2, r2, #0x1
	add	r1, r1, #0x6c
	cmp	r2, #0x3f
	ble	.L75	@cond_branch
	mov	r0, #0x0
.L78:
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 sub_8002EC4,.Lfe15-sub_8002EC4
	.align	2, 0
	.globl	sub_8002EF4
	.type	 sub_8002EF4,function
	.thumb_func
sub_8002EF4:
	push	{lr}
	add	r3, r0, #0
	ldr	r1, .L89
	mov	r2, #0x0
.L85:
	ldr	r0, [r1]
	cmp	r0, #0
	beq	.L84	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x26
	ldrb	r0, [r0]
	cmp	r0, r3
	bne	.L84	@cond_branch
	add	r0, r1, #0
	b	.L88
.L90:
	.align	2, 0
.L89:
	.word	gUnknown_02024E68
.L84:
	add	r2, r2, #0x1
	add	r1, r1, #0x6c
	cmp	r2, #0x3f
	ble	.L85	@cond_branch
	mov	r0, #0x0
.L88:
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 sub_8002EF4,.Lfe16-sub_8002EF4
	.align	2, 0
	.globl	Goto6CLabel
	.type	 Goto6CLabel,function
	.thumb_func
Goto6CLabel:
	.syntax unified
	push {r4, r5, r6, lr}
	adds r4, r1, #0
	adds r1, r0, #0
	ldr r2, [r1]
	ldrh r3, [r2]
	movs r5, #0
	ldrsh r0, [r2, r5]
	cmp r0, #0
	beq _08002F56
	movs r5, #0
_08002F38:
	cmp r3, #0xb
	bne _08002F4A
	movs r6, #2
	ldrsh r0, [r2, r6]
	cmp r0, r4
	bne _08002F4A
	str r2, [r1, #4]
	str r5, [r1, #0xc]
	b _08002F56
_08002F4A:
	adds r2, #8
	ldrh r3, [r2]
	movs r6, #0
	ldrsh r0, [r2, r6]
	cmp r0, #0
	bne _08002F38
_08002F56:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
    .syntax divided
	.code	16
.Lfe17:
	.size	 Goto6CLabel,.Lfe17-Goto6CLabel
	.align	2, 0
	.globl	Goto6CPointer
	.type	 Goto6CPointer,function
	.thumb_func
Goto6CPointer:
	str	r1, [r0, #0x4]
	mov	r1, #0x0
	str	r1, [r0, #0xc]
	bx	lr
.Lfe18:
	.size	 Goto6CPointer,.Lfe18-Goto6CPointer
	.align	2, 0
	.globl	Set6CMark
	.type	 Set6CMark,function
	.thumb_func
Set6CMark:
	add	r0, r0, #0x26
	strb	r1, [r0]
	bx	lr
.Lfe19:
	.size	 Set6CMark,.Lfe19-Set6CMark
	.align	2, 0
	.globl	Set6CDestructor
	.type	 Set6CDestructor,function
	.thumb_func
Set6CDestructor:
	str	r1, [r0, #0x8]
	bx	lr
.Lfe20:
	.size	 Set6CDestructor,.Lfe20-Set6CDestructor
	.align	2, 0
	.globl	ForAll6C
	.type	 ForAll6C,function
	.thumb_func
ForAll6C:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r4, .L102
	mov	r5, #0x3f
.L99:
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L98	@cond_branch
	add	r0, r4, #0
	bl	_call_via_r6
.L98:
	sub	r5, r5, #0x1
	add	r4, r4, #0x6c
	cmp	r5, #0
	bge	.L99	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L103:
	.align	2, 0
.L102:
	.word	gUnknown_02024E68
.Lfe21:
	.size	 ForAll6C,.Lfe21-ForAll6C
	.align	2, 0
	.globl	ForEach6C
	.type	 ForEach6C,function
	.thumb_func
ForEach6C:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	add	r6, r1, #0
	ldr	r4, .L111
	mov	r5, #0x3f
.L108:
	ldr	r0, [r4]
	cmp	r0, r7
	bne	.L107	@cond_branch
	add	r0, r4, #0
	bl	_call_via_r6
.L107:
	sub	r5, r5, #0x1
	add	r4, r4, #0x6c
	cmp	r5, #0
	bge	.L108	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L112:
	.align	2, 0
.L111:
	.word	gUnknown_02024E68
.Lfe22:
	.size	 ForEach6C,.Lfe22-ForEach6C
	.align	2, 0
	.globl	sub_8002FC0
	.type	 sub_8002FC0,function
	.thumb_func
sub_8002FC0:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	add	r6, r1, #0
	ldr	r4, .L120
	mov	r5, #0x3f
.L117:
	add	r0, r4, #0
	add	r0, r0, #0x26
	ldrb	r0, [r0]
	cmp	r0, r7
	bne	.L116	@cond_branch
	add	r0, r4, #0
	bl	_call_via_r6
.L116:
	sub	r5, r5, #0x1
	add	r4, r4, #0x6c
	cmp	r5, #0
	bge	.L117	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L121:
	.align	2, 0
.L120:
	.word	gUnknown_02024E68
.Lfe23:
	.size	 sub_8002FC0,.Lfe23-sub_8002FC0
	.align	2, 0
	.globl	BlockEach6CMarked
	.type	 BlockEach6CMarked,function
	.thumb_func
BlockEach6CMarked:
	push	{lr}
	add	r3, r0, #0
	mov	r2, #0x3f
	ldr	r0, .L129
	add	r1, r0, #0
	add	r1, r1, #0x26
.L126:
	ldrb	r0, [r1]
	cmp	r0, r3
	bne	.L125	@cond_branch
	ldrb	r0, [r1, #0x2]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x2]
.L125:
	sub	r2, r2, #0x1
	add	r1, r1, #0x6c
	cmp	r2, #0
	bge	.L126	@cond_branch
	pop	{r0}
	bx	r0
.L130:
	.align	2, 0
.L129:
	.word	gUnknown_02024E68
.Lfe24:
	.size	 BlockEach6CMarked,.Lfe24-BlockEach6CMarked
	.align	2, 0
	.globl	UnblockEach6CMarked
	.type	 UnblockEach6CMarked,function
	.thumb_func
UnblockEach6CMarked:
	push	{lr}
	add	r3, r0, #0
	mov	r2, #0x3f
	ldr	r0, .L138
	add	r1, r0, #0
	add	r1, r1, #0x26
.L135:
	ldrb	r0, [r1]
	cmp	r0, r3
	bne	.L134	@cond_branch
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L134	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x2]
.L134:
	sub	r2, r2, #0x1
	add	r1, r1, #0x6c
	cmp	r2, #0
	bge	.L135	@cond_branch
	pop	{r0}
	bx	r0
.L139:
	.align	2, 0
.L138:
	.word	gUnknown_02024E68
.Lfe25:
	.size	 UnblockEach6CMarked,.Lfe25-UnblockEach6CMarked
	.align	2, 0
	.globl	DeleteEach6CMarked
	.type	 DeleteEach6CMarked,function
	.thumb_func
DeleteEach6CMarked:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r4, .L147
	mov	r5, #0x3f
.L144:
	add	r0, r4, #0
	add	r0, r0, #0x26
	ldrb	r0, [r0]
	cmp	r0, r6
	bne	.L143	@cond_branch
	add	r0, r4, #0
	bl	Delete6C
.L143:
	sub	r5, r5, #0x1
	add	r4, r4, #0x6c
	cmp	r5, #0
	bge	.L144	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L148:
	.align	2, 0
.L147:
	.word	gUnknown_02024E68
.Lfe26:
	.size	 DeleteEach6CMarked,.Lfe26-DeleteEach6CMarked
	.align	2, 0
	.globl	Delete6C_
	.type	 Delete6C_,function
	.thumb_func
Delete6C_:
	push	{lr}
	bl	Delete6C
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 Delete6C_,.Lfe27-Delete6C_
	.align	2, 0
	.globl	DeleteEach6C
	.type	 DeleteEach6C,function
	.thumb_func
DeleteEach6C:
	push	{lr}
	ldr	r1, .L151
	bl	ForEach6C
	pop	{r0}
	bx	r0
.L152:
	.align	2, 0
.L151:
	.word	Delete6C_
.Lfe28:
	.size	 DeleteEach6C,.Lfe28-DeleteEach6C
	.align	2, 0
	.globl	Clear6CLoopWrapper
	.type	 Clear6CLoopWrapper,function
	.thumb_func
Clear6CLoopWrapper:
	push	{lr}
	bl	Break6CLoop
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 Clear6CLoopWrapper,.Lfe29-Clear6CLoopWrapper
	.align	2, 0
	.globl	ClearCallbackAll6CMatch
	.type	 ClearCallbackAll6CMatch,function
	.thumb_func
ClearCallbackAll6CMatch:
	push	{lr}
	ldr	r1, .L155
	bl	ForEach6C
	pop	{r0}
	bx	r0
.L156:
	.align	2, 0
.L155:
	.word	Clear6CLoopWrapper
.Lfe30:
	.size	 ClearCallbackAll6CMatch,.Lfe30-ClearCallbackAll6CMatch
	.align	2, 0
	.globl	ForAllFollowing6C
	.type	 ForAllFollowing6C,function
	.thumb_func
ForAllFollowing6C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r0, [r4, #0x20]
	cmp	r0, #0
	beq	.L158	@cond_branch
	bl	ForAllFollowing6C
.L158:
	add	r0, r4, #0
	bl	_call_via_r5
	ldr	r0, [r4, #0x18]
	cmp	r0, #0
	beq	.L159	@cond_branch
	add	r1, r5, #0
	bl	ForAllFollowing6C
.L159:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 ForAllFollowing6C,.Lfe31-ForAllFollowing6C
	.align	2, 0
	.globl	sub_80030CC
	.type	 sub_80030CC,function
	.thumb_func
sub_80030CC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	bl	_call_via_r5
	ldr	r0, [r4, #0x18]
	cmp	r0, #0
	beq	.L161	@cond_branch
	add	r1, r5, #0
	bl	ForAllFollowing6C
.L161:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 sub_80030CC,.Lfe32-sub_80030CC
	.align	2, 0
	.globl	Call6C_00Delete
	.type	 Call6C_00Delete,function
	.thumb_func
Call6C_00Delete:
	push	{lr}
	bl	Delete6C
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 Call6C_00Delete,.Lfe33-Call6C_00Delete
	.align	2, 0
	.globl	Call6C_01Name
	.type	 Call6C_01Name,function
	.thumb_func
Call6C_01Name:
	ldr	r1, [r0, #0x4]
	ldr	r2, [r1, #0x4]
	str	r2, [r0, #0x10]
	add	r1, r1, #0x8
	str	r1, [r0, #0x4]
	mov	r0, #0x1
	bx	lr
.Lfe34:
	.size	 Call6C_01Name,.Lfe34-Call6C_01Name
	.align	2, 0
	.globl	Call6C_02CallAndContinue
	.type	 Call6C_02CallAndContinue,function
	.thumb_func
Call6C_02CallAndContinue:
	push	{lr}
	ldr	r1, [r0, #0x4]
	ldr	r2, [r1, #0x4]
	add	r1, r1, #0x8
	str	r1, [r0, #0x4]
	bl	_call_via_r2
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 Call6C_02CallAndContinue,.Lfe35-Call6C_02CallAndContinue
	.align	2, 0
	.globl	Call6C_16Call
	.type	 Call6C_16Call,function
	.thumb_func
Call6C_16Call:
	push	{lr}
	ldr	r1, [r0, #0x4]
	ldr	r2, [r1, #0x4]
	add	r1, r1, #0x8
	str	r1, [r0, #0x4]
	bl	_call_via_r2
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 Call6C_16Call,.Lfe36-Call6C_16Call
	.align	2, 0
	.globl	Call6C_18CallWithArg
	.type	 Call6C_18CallWithArg,function
	.thumb_func
Call6C_18CallWithArg:
	push	{lr}
	add	r1, r0, #0
	ldr	r2, [r1, #0x4]
	ldrh	r0, [r2, #0x2]
	ldr	r3, [r2, #0x4]
	add	r2, r2, #0x8
	str	r2, [r1, #0x4]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	bl	_call_via_r3
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 Call6C_18CallWithArg,.Lfe37-Call6C_18CallWithArg
	.align	2, 0
	.globl	Call6C_14While
	.type	 Call6C_14While,function
	.thumb_func
Call6C_14While:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x4]
	ldr	r1, [r0, #0x4]
	add	r0, r0, #0x8
	str	r0, [r4, #0x4]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L168	@cond_branch
	mov	r0, #0x1
	b	.L169
.L168:
	ldr	r0, [r4, #0x4]
	sub	r0, r0, #0x8
	str	r0, [r4, #0x4]
	mov	r0, #0x0
.L169:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe38:
	.size	 Call6C_14While,.Lfe38-Call6C_14While
	.align	2, 0
	.globl	Call6C_03SetLoop
	.type	 Call6C_03SetLoop,function
	.thumb_func
Call6C_03SetLoop:
	ldr	r1, [r0, #0x4]
	ldr	r2, [r1, #0x4]
	str	r2, [r0, #0xc]
	add	r1, r1, #0x8
	str	r1, [r0, #0x4]
	mov	r0, #0x0
	bx	lr
.Lfe39:
	.size	 Call6C_03SetLoop,.Lfe39-Call6C_03SetLoop
	.align	2, 0
	.globl	Call6C_04SetDestructor
	.type	 Call6C_04SetDestructor,function
	.thumb_func
Call6C_04SetDestructor:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x4]
	ldr	r1, [r0, #0x4]
	add	r0, r4, #0
	bl	Set6CDestructor
	ldr	r0, [r4, #0x4]
	add	r0, r0, #0x8
	str	r0, [r4, #0x4]
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe40:
	.size	 Call6C_04SetDestructor,.Lfe40-Call6C_04SetDestructor
	.align	2, 0
	.globl	Call6C_05AddChild
	.type	 Call6C_05AddChild,function
	.thumb_func
Call6C_05AddChild:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x4]
	ldr	r0, [r0, #0x4]
	add	r1, r4, #0
	bl	New6C
	ldr	r0, [r4, #0x4]
	add	r0, r0, #0x8
	str	r0, [r4, #0x4]
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 Call6C_05AddChild,.Lfe41-Call6C_05AddChild
	.align	2, 0
	.globl	Call6C_06AddBlockingChild
	.type	 Call6C_06AddBlockingChild,function
	.thumb_func
Call6C_06AddBlockingChild:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x4]
	ldr	r0, [r0, #0x4]
	add	r1, r4, #0
	bl	NewBlocking6C
	ldr	r0, [r4, #0x4]
	add	r0, r0, #0x8
	str	r0, [r4, #0x4]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe42:
	.size	 Call6C_06AddBlockingChild,.Lfe42-Call6C_06AddBlockingChild
	.align	2, 0
	.globl	Call6C_07AddGlobal_BuggedMaybe
	.type	 Call6C_07AddGlobal_BuggedMaybe,function
	.thumb_func
Call6C_07AddGlobal_BuggedMaybe:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x4]
	ldr	r0, [r0, #0x4]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	bl	New6C
	ldr	r0, [r4, #0x4]
	add	r0, r0, #0x8
	str	r0, [r4, #0x4]
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe43:
	.size	 Call6C_07AddGlobal_BuggedMaybe,.Lfe43-Call6C_07AddGlobal_BuggedMaybe
	.align	2, 0
	.globl	Call6C_08WhileExists
	.type	 Call6C_08WhileExists,function
	.thumb_func
Call6C_08WhileExists:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x4]
	ldr	r0, [r0, #0x4]
	bl	Find6C
	neg	r1, r0
	orr	r1, r1, r0
	cmp	r1, #0
	blt	.L176	@cond_branch
	ldr	r0, [r4, #0x4]
	add	r0, r0, #0x8
	str	r0, [r4, #0x4]
	mov	r0, #0x1
	b	.L177
.L176:
	mov	r0, #0x0
.L177:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe44:
	.size	 Call6C_08WhileExists,.Lfe44-Call6C_08WhileExists
	.align	2, 0
	.globl	Call6C_09DeleteEach6C
	.type	 Call6C_09DeleteEach6C,function
	.thumb_func
Call6C_09DeleteEach6C:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x4]
	ldr	r0, [r0, #0x4]
	bl	DeleteEach6C
	ldr	r0, [r4, #0x4]
	add	r0, r0, #0x8
	str	r0, [r4, #0x4]
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 Call6C_09DeleteEach6C,.Lfe45-Call6C_09DeleteEach6C
	.align	2, 0
	.globl	Call6C_0AClearLoopForEach6C
	.type	 Call6C_0AClearLoopForEach6C,function
	.thumb_func
Call6C_0AClearLoopForEach6C:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x4]
	ldr	r0, [r0, #0x4]
	bl	ClearCallbackAll6CMatch
	ldr	r0, [r4, #0x4]
	add	r0, r0, #0x8
	str	r0, [r4, #0x4]
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 Call6C_0AClearLoopForEach6C,.Lfe46-Call6C_0AClearLoopForEach6C
	.align	2, 0
	.globl	Call6C_0BOr19Label
	.type	 Call6C_0BOr19Label,function
	.thumb_func
Call6C_0BOr19Label:
	ldr	r1, [r0, #0x4]
	add	r1, r1, #0x8
	str	r1, [r0, #0x4]
	mov	r0, #0x1
	bx	lr
.Lfe47:
	.size	 Call6C_0BOr19Label,.Lfe47-Call6C_0BOr19Label
	.align	2, 0
	.globl	Call6C_0DJump
	.type	 Call6C_0DJump,function
	.thumb_func
Call6C_0DJump:
	push	{lr}
	ldr	r1, [r0, #0x4]
	ldr	r1, [r1, #0x4]
	bl	Goto6CPointer
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 Call6C_0DJump,.Lfe48-Call6C_0DJump
	.align	2, 0
	.globl	Call6C_0CGotoLabel
	.type	 Call6C_0CGotoLabel,function
	.thumb_func
Call6C_0CGotoLabel:
	push	{lr}
	ldr	r1, [r0, #0x4]
	mov	r2, #0x2
	ldrsh	r1, [r1, r2]
	bl	Goto6CLabel
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe49:
	.size	 Call6C_0CGotoLabel,.Lfe49-Call6C_0CGotoLabel
	.align	2, 0
	.globl	_6CSleepLoop
	.type	 _6CSleepLoop,function
	.thumb_func
_6CSleepLoop:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x24]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L184	@cond_branch
	add	r0, r1, #0
	bl	Break6CLoop
.L184:
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 _6CSleepLoop,.Lfe50-_6CSleepLoop
	.align	2, 0
	.globl	Call6C_0ESleep
	.type	 Call6C_0ESleep,function
	.thumb_func
Call6C_0ESleep:
	push	{lr}
	add	r1, r0, #0
	ldr	r0, [r1, #0x4]
	ldrh	r2, [r0, #0x2]
	mov	r3, #0x2
	ldrsh	r0, [r0, r3]
	cmp	r0, #0
	beq	.L186	@cond_branch
	strh	r2, [r1, #0x24]
	ldr	r0, .L187
	str	r0, [r1, #0xc]
.L186:
	ldr	r0, [r1, #0x4]
	add	r0, r0, #0x8
	str	r0, [r1, #0x4]
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L188:
	.align	2, 0
.L187:
	.word	_6CSleepLoop
.Lfe51:
	.size	 Call6C_0ESleep,.Lfe51-Call6C_0ESleep
	.align	2, 0
	.globl	Call6C_0FMark
	.type	 Call6C_0FMark,function
	.thumb_func
Call6C_0FMark:
	ldr	r1, [r0, #0x4]
	ldrh	r1, [r1, #0x2]
	add	r2, r0, #0
	add	r2, r2, #0x26
	strb	r1, [r2]
	ldr	r1, [r0, #0x4]
	add	r1, r1, #0x8
	str	r1, [r0, #0x4]
	mov	r0, #0x1
	bx	lr
.Lfe52:
	.size	 Call6C_0FMark,.Lfe52-Call6C_0FMark
	.align	2, 0
	.globl	Call6C_13Blank
	.type	 Call6C_13Blank,function
	.thumb_func
Call6C_13Blank:
	ldr	r1, [r0, #0x4]
	add	r1, r1, #0x8
	str	r1, [r0, #0x4]
	mov	r0, #0x1
	bx	lr
.Lfe53:
	.size	 Call6C_13Blank,.Lfe53-Call6C_13Blank
	.align	2, 0
	.globl	Call6C_10Block
	.type	 Call6C_10Block,function
	.thumb_func
Call6C_10Block:
	mov	r0, #0x0
	bx	lr
.Lfe54:
	.size	 Call6C_10Block,.Lfe54-Call6C_10Block
	.align	2, 0
	.globl	Call6C_11DeleteIfDuplicate
	.type	 Call6C_11DeleteIfDuplicate,function
	.thumb_func
Call6C_11DeleteIfDuplicate:
	push	{r4, r5, lr}
	add	r3, r0, #0
	ldr	r2, .L201
	mov	r4, #0x0
	ldr	r5, [r3]
	mov	r1, #0x3f
.L196:
	ldr	r0, [r2]
	cmp	r0, r5
	bne	.L195	@cond_branch
	add	r4, r4, #0x1
.L195:
	sub	r1, r1, #0x1
	add	r2, r2, #0x6c
	cmp	r1, #0
	bge	.L196	@cond_branch
	cmp	r4, #0x1
	bgt	.L199	@cond_branch
	ldr	r0, [r3, #0x4]
	add	r0, r0, #0x8
	str	r0, [r3, #0x4]
	mov	r0, #0x1
	b	.L200
.L202:
	.align	2, 0
.L201:
	.word	gUnknown_02024E68
.L199:
	add	r0, r3, #0
	bl	Delete6C
	mov	r0, #0x0
.L200:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe55:
	.size	 Call6C_11DeleteIfDuplicate,.Lfe55-Call6C_11DeleteIfDuplicate
	.align	2, 0
	.globl	Call6C_17DeleteOtherDuplicates
	.type	 Call6C_17DeleteOtherDuplicates,function
	.thumb_func
Call6C_17DeleteOtherDuplicates:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r2, .L210
	mov	r3, #0x0
	b	.L204
.L211:
	.align	2, 0
.L210:
	.word	gUnknown_02024E68
.L206:
	add	r3, r3, #0x1
	add	r2, r2, #0x6c
.L204:
	cmp	r3, #0x3f
	bgt	.L205	@cond_branch
	cmp	r2, r4
	beq	.L206	@cond_branch
	ldr	r1, [r2]
	ldr	r0, [r4]
	cmp	r1, r0
	bne	.L206	@cond_branch
	add	r0, r2, #0
	bl	Delete6C
.L205:
	ldr	r0, [r4, #0x4]
	add	r0, r0, #0x8
	str	r0, [r4, #0x4]
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe56:
	.size	 Call6C_17DeleteOtherDuplicates,.Lfe56-Call6C_17DeleteOtherDuplicates
	.align	2, 0
	.globl	Call6C_15Blank
	.type	 Call6C_15Blank,function
	.thumb_func
Call6C_15Blank:
	ldr	r1, [r0, #0x4]
	add	r1, r1, #0x8
	str	r1, [r0, #0x4]
	mov	r0, #0x1
	bx	lr
.Lfe57:
	.size	 Call6C_15Blank,.Lfe57-Call6C_15Blank
	.align	2, 0
	.globl	Call6C_12SetBit4
	.type	 Call6C_12SetBit4,function
	.thumb_func
Call6C_12SetBit4:
	add	r3, r0, #0
	add	r3, r3, #0x27
	ldrb	r2, [r3]
	mov	r1, #0x4
	orr	r1, r1, r2
	strb	r1, [r3]
	ldr	r1, [r0, #0x4]
	add	r1, r1, #0x8
	str	r1, [r0, #0x4]
	mov	r0, #0x1
	bx	lr
.Lfe58:
	.size	 Call6C_12SetBit4,.Lfe58-Call6C_12SetBit4
	.align	2, 0
	.globl	Call6CCode
	.type	 Call6CCode,function
	.thumb_func
Call6CCode:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L214	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x28
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L214	@cond_branch
	ldr	r0, [r4, #0xc]
	cmp	r0, #0
	bne	.L214	@cond_branch
	ldr	r5, .L223
	b	.L218
.L224:
	.align	2, 0
.L223:
	.word	gUnknown_085879D8
.L220:
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L214	@cond_branch
.L218:
	ldr	r0, [r4, #0x4]
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L220	@cond_branch
.L214:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 Call6CCode,.Lfe59-Call6CCode
	.align	2, 0
	.globl	nullsub_2
	.type	 nullsub_2,function
	.thumb_func
nullsub_2:
	bx	lr
.Lfe60:
	.size	 nullsub_2,.Lfe60-nullsub_2
	.align	2, 0
	.globl	ForEach6CDoNothing
	.type	 ForEach6CDoNothing,function
	.thumb_func
ForEach6CDoNothing:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r0, [r4, #0x20]
	cmp	r0, #0
	beq	.L227	@cond_branch
	bl	ForEach6CDoNothing
.L227:
	add	r0, r4, #0
	bl	nullsub_2
	ldr	r1, [r4, #0x18]
	cmp	r1, #0
	beq	.L228	@cond_branch
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	add	r0, r1, #0
	add	r1, r5, #0
	bl	ForEach6CDoNothing
	ldr	r0, [r5]
	sub	r0, r0, #0x2
	str	r0, [r5]
.L228:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 ForEach6CDoNothing,.Lfe61-ForEach6CDoNothing
	.align	2, 0
	.globl	sub_8003418
	.type	 sub_8003418,function
	.thumb_func
sub_8003418:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	add	r4, r0, #0
	mov	r0, #0x4
	str	r0, [sp]
	add	r0, r4, #0
	bl	nullsub_2
	ldr	r1, [r4, #0x18]
	cmp	r1, #0
	beq	.L230	@cond_branch
	ldr	r0, [sp]
	add	r0, r0, #0x2
	str	r0, [sp]
	add	r0, r1, #0
	mov	r1, sp
	bl	ForEach6CDoNothing
	ldr	r0, [sp]
	sub	r0, r0, #0x2
	str	r0, [sp]
.L230:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 sub_8003418,.Lfe62-sub_8003418
	.align	2, 0
	.globl	sub_800344C
	.type	 sub_800344C,function
	.thumb_func
sub_800344C:
	bx	lr
.Lfe63:
	.size	 sub_800344C,.Lfe63-sub_800344C
	.align	2, 0
	.globl	Set6CLoop
	.type	 Set6CLoop,function
	.thumb_func
Set6CLoop:
	str	r1, [r0, #0xc]
	bx	lr
.Lfe64:
	.size	 Set6CLoop,.Lfe64-Set6CLoop
	.align	2, 0
	.globl	sub_8003454
	.type	 sub_8003454,function
	.thumb_func
sub_8003454:
	add	r0, r0, #0x28
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	bx	lr
.Lfe65:
	.size	 sub_8003454,.Lfe65-sub_8003454
	.align	2, 0
	.globl	sub_8003460
	.type	 sub_8003460,function
	.thumb_func
sub_8003460:
	add	r0, r0, #0x28
	ldrb	r1, [r0]
	sub	r1, r1, #0x1
	strb	r1, [r0]
	bx	lr
.Lfe66:
	.size	 sub_8003460,.Lfe66-sub_8003460
.ALIGN 2, 0
